apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
    name: docs-template
    title: DevHub Technical Documentation Template
    description: Create a new repository for technical documentation
    tags:
        - recommended
        - techdocs
        - mkdocs
spec:
    owner: "developer-experience"
    type: documentation
    parameters:
        -   title: Provide information about your product (or service/component)
            properties:
                program_area:
                    title: Program area
                    type: string
                    description: Name of the program area associated with the product
                acronym:
                    title: Product acronym
                    type: string
                    description: An acronym used to identity the product, if there is one
                product_owner:
                    title: Product owner
                    type: string
                    description: Name of the individual in the Product Owner role for the product
                hosting_platform:
                    title: Hosting platform
                    type: string
                    description: Name of the technical platform where the product is hosted
        -   title: Provide information about your product's documentation
            required:
                - name
                - description
            properties:
                name:
                    title: Name
                    type: string
                    description: A unique name for the documentation
                    ui:field: EntityNamePicker
                    ui:autofocus: true
                description:
                    title: Description
                    type: string
                    description: A description for the documentation
                owner:
                    title: Owner
                    type: string
                    description: Team that owns the documentation
                    ui:field: OwnerPicker
                    ui:options:
                        allowedKinds:
                            - Group
        -   title: Specify repository details
            required:
                - repoUrl
            properties:
                repoUrl:
                    title: Repository Location
                    type: string
                    ui:field: RepoUrlPicker
                    ui:options:
                        # Here's the option you can pass to the RepoUrlPicker
                        requestUserCredentials:
                            secretsKey: USER_OAUTH_TOKEN
                            additionalScopes:
                                github:
                                    - workflow
                        allowedHosts:
                            - github.com
                        allowedOrganizations:
                            - bcgov

    # This template is meant to be used on top of an existing template.
    # By adding the following and fetching from an absolute URL you can
    # add in the docs template
    steps:
        -   id: fetch-base
            name: Template Docs Skeleton
            action: fetch:template
            input:
                url: ./skeleton
                values:
                    name: ${{ parameters.name }}
                    description: ${{ parameters.description }}
                    destination: ${{ parameters.repoUrl | parseRepoUrl }}
                    owner: ${{ parameters.owner }}

        -   id: fetch-action
            name: Template Docs GitHub Action
            action: fetch:plain
            input:
                url: ../../shared/.github
                targetPath: ./.github

        -   id: publish
            name: Publish
            action: publish:github
            input:
                allowedHosts: [ "github.com" ]
                description: This is ${{ parameters.name }}
                repoUrl: ${{ parameters.repoUrl }}
                token: ${{ secrets.USER_OAUTH_TOKEN }}
                defaultBranch: "main"
                gitAuthorName: ${{ user.entity.metadata.name }}
                gitAuthorEmail: ${{ user.entity.spec.profile.email }}

        -   id: register
            name: Register
            action: catalog:register
            input:
                repoContentsUrl: ${{ steps.publish.output.repoContentsUrl }}
                catalogInfoPath: "/catalog-info.yaml"

    output:
        links:
            -   title: Repository
                url: ${{ steps.publish.output.remoteUrl }}
            -   title: Open in catalog
                icon: catalog
                entityRef: ${{ steps.register.output.entityRef }}
