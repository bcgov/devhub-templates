apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: GitHub-Repo-Transfer
  title: Transfer a repository between organizations
  description: Transfer a repository from the BCDevOps GitHub organization to the bcgov GitHub enterprise organization
spec:
  owner: "developer-experience"
  type: service

  parameters:
    - title: Transfer a repository
      required:
        - repoToTransfer
        - targetOrg
        - owner
      properties:
        repoToTransfer:
          title: Repository to transfer
          type: string
          ui:field: RepoUrlPicker
          ui:options:
            requestUserCredentials: # this is super important - it causes the user to be prompted to log in to GitHub and/or authorize the required GH scopes.
              secretsKey: USER_OAUTH_TOKEN
              additionalScopes:
                github:
                  - repo
                  - workflow
                  - read_org
                  - delete_repo
            allowedHosts:
              - github.com
            allowedOrganizations:
              - BCDevOps
            allowedOwners:
              - BCDevOps
        targetOrg:
          title: Target GitHub Organization
          description: GitHub organization where the repo is transfering to
          type: string
          default: bcgov
        owner:
          title: GitHub team (required)
          type: string
          description: The team in the bcgov GitHub Organization that maintains the repo.
          ui:field: OwnerPicker
          ui:options:
              allowArbitraryValues: false
              catalogFilter:
                - kind: [ Group ]
                  metadata.namespace: bcgov
  steps:
    - id: get-default-branch
      name: Get repo's default branch
      action: http:backstage:request
      input:
        method: 'GET'
        path: 'proxy/github-api/repos/${{ (parameters.repoToTransfer | parseRepoUrl).owner }}/${{ (parameters.repoToTransfer | parseRepoUrl).repo }}'
        logRequestPath: true
        headers:
          content-type: 'application/json'
          Authorization: 'Bearer ${{ secrets.USER_OAUTH_TOKEN }}'

    # The PR is created on the repo before the transfer because there is a timing issue if the PR is created after the transfer
    # The PR creation will fail because the transfer has not completed. So, create the PR on the repo before it is transferred
    # The PR will be moved with the repo.
    # - id: create-pr-meta-data
    #   name: Create PR to add meta data
    #   action: publish:github:pull-request
    #   input:
    #     repoUrl: ${{ parameters.repoToTransfer }}
    #     title: "Add DevHub meta data"
    #     branchName: "DevHub-transfer-pr-branch"
    #     description: "This pull request will add DevHub meta data files"
    #     token: ${{ secrets.USER_OAUTH_TOKEN }} 
    #     targetBranchName: '${{ steps["get-default-branch"].output.body.default_branch }}'
    #     commitMessage: "Add DevHub meta data files"
    #     update: true

    # Need to get the team id because the transfer repo endpoint accepts teamid not team slug
    - id: get-team-id
      name: Get team id
      action: http:backstage:request
      input:
        method: 'GET'
        path: 'proxy/github-api/orgs/${{ parameters.targetOrg }}/teams/${{ parameters.owner | parseEntityRef | pick("name") }}'
        logRequestPath: true
        headers:
          content-type: 'application/json'
          Authorization: 'Bearer ${{ secrets.USER_OAUTH_TOKEN }}'

    - id: transfer-repo
      name: Transfer repo
      action: http:backstage:request
      input:
        method: 'POST'
        path: 'proxy/github-api/repos/${{ (parameters.repoToTransfer | parseRepoUrl).owner }}/${{ (parameters.repoToTransfer | parseRepoUrl).repo }}/transfer'
        logRequestPath: true
        headers:
          content-type: 'application/json'
          Authorization: 'Bearer ${{ secrets.USER_OAUTH_TOKEN }}'
        body:
          new_owner: ${{ parameters.targetOrg }}
          team_ids: [ '${{ steps["get-team-id"].output.body.id }}' ]

  output:
    links:
      - title: Transferred repository URL
        url: 'https://github.com/${{ parameters.targetOrg }}/${{ (parameters.repoToTransfer | parseRepoUrl).repo }}'
    text:
      - title: Next Steps
        content: |         
          The repository was transferred
 
